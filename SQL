CREATE TABLE #創建新表
DROP TABLE #刪除
SELECT #查詢
#1
SELECT *
 FROM orders
LIMIT 10; #限定前10行

SELECT occurred_at,account_id,channel
FROM web_events
LIMIT 15;
#2
# ORDER BY 语句始终在 SELECT 和 FROM 语句之后，但位于 LIMIT 语句之前
# ORDER BY 语句中的列之后添加 DESC，然后按降序排序，默认按升序
# LIMIT 语句始终显示在最后

SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC
LIMIT 5;

#可以一次 ORDER BY 多列。这个语句可以按照从左至右列出的列进行排序。也可以翻过来使用 DESC
SELECT *
FROM orders
ORDER BY occurred_at DESC,total_amt_usd DESC
LIMIT 5;

#WHERE 语句来为表格创建子集
>（大于）
<（小于）
>=（大于或等于）
<=（小于或等于）
=（等于）
!=（不等于）
SELECT *
FROM orders
WHERE gloss_amt_usd>=1000
LIMIT 5;

#WHERE 语句与非数字数据
# = , ！= 运算符,确保在文本数据中使用引号
# LIKE、NOT 或 IN 运算符
SELECT name,website,primary_poc
FROM accounts
WHERE name='Exxon Mobil';

#LIKE 语句
SELECT name
FROM accounts
WHERE name LIKE 'C%'; #以C 開頭

SELECT name
FROM accounts
WHERE name LIKE '%one%'; # 包含 one

SELECT name
FROM accounts
WHERE name LIKE '%s'; #s 結尾

# IN 語句
SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name IN ('Walmart', 'Target', 'Nordstrom');

#AND 运算符用于 WHERE 语句中，用于一次考虑多个逻辑子句
SELECT *
FROM orders
WHERE standard_qty>1000 AND poster_qty=0 AND gloss_qty=0;

SELECT name
FROM accounts
WHERE name NOT LIKE 'C%' AND name LIKE '%s';

SELECT *
FROM web_events
WHERE channel IN ('organic','adwords') AND
occurred_at BETWEEN '2016-01-01' AND '2017-01-01'
ORDER BY occurred_at DESC;

#OR 語句
SELECT *
FROM orders
WHERE standard_qty=0 AND (gloss_qty>1000 OR poster_qty>1000);

SELECT *
FROM accounts
WHERE (name LIKE 'C%' OR name LIKE 'W%')
            AND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%')
            AND (primary_poc NOT LIKE '%eana%'));

#JOIN 語句
SELECT orders.standard_qty,orders.gloss_qty,orders.poster_qty,
       accounts.website,accounts.primary_poc
FROM orders
JOIN accounts
ON orders.account_id = accounts.id;
''''
主键 (PK)
主键是特定表格的唯一列。在我们的每个表格中是第一列，并且这些列都叫做 id，但是并非必须都要这样。
通常，在大多数数据库中，主键是表格的第一列。
外键 (FK)
外键是另一个表格中的主键。
#连接表格时，最好能为每个表格设置一个别名
FROM tablename AS t1
JOIN tablename2 AS t2

''''
SELECT accounts.name,accounts.primary_poc,web_events.occurred_at,web_events.channel
FROM accounts
JOIN web_events
ON accounts.id = web_events.account_id
WHERE name='Walmart';

SELECT r.name region,s.name rep,a.name account
FROM sales_reps s
JOIN accounts a
ON s.id = a.sales_rep_id
JOIN region r
ON r.id = s.region_id
ORDER BY a.name;

SELECT
r.name regionname,
a.name accname,
o.total_amt_usd/(o.total+ 0.01) unitprice
FROM accounts a
JOIN orders o
ON o.account_id = a.id
JOIN sales_reps s
ON s.id = a.sales_rep_id
JOIN region r
ON r.id = s.region_id;

#JOIN - 一种 INNER JOIN，仅获取在两个表格中都存在的数据。
#LEFT JOIN - 用于获取 FROM 中的表格中的所有行，即使它们不存在于 JOIN 语句中。
#RIGHT JOIN - 用于获取 JOIN 中的表格中的所有行，即使它们不存在于 FROM 语句中。
