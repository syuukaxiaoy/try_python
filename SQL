CREATE TABLE #創建新表
DROP TABLE #刪除
SELECT #查詢
#1
SELECT *
 FROM orders
LIMIT 10; #限定前10行

SELECT occurred_at,account_id,channel
FROM web_events
LIMIT 15;
#2
# ORDER BY 语句始终在 SELECT 和 FROM 语句之后，但位于 LIMIT 语句之前
# ORDER BY 语句中的列之后添加 DESC，然后按降序排序，默认按升序
# LIMIT 语句始终显示在最后

SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC
LIMIT 5;

#可以一次 ORDER BY 多列。这个语句可以按照从左至右列出的列进行排序。也可以翻过来使用 DESC
SELECT *
FROM orders
ORDER BY occurred_at DESC,total_amt_usd DESC
LIMIT 5;

#WHERE 语句来为表格创建子集
>（大于）
<（小于）
>=（大于或等于）
<=（小于或等于）
=（等于）
!=（不等于）
SELECT *
FROM orders
WHERE gloss_amt_usd>=1000
LIMIT 5;

#WHERE 语句与非数字数据
# = , ！= 运算符,确保在文本数据中使用引号
# LIKE、NOT 或 IN 运算符
SELECT name,website,primary_poc
FROM accounts
WHERE name='Exxon Mobil';

#LIKE 语句
SELECT name
FROM accounts
WHERE name LIKE 'C%'; #以C 開頭

SELECT name
FROM accounts
WHERE name LIKE '%one%'; # 包含 one

SELECT name
FROM accounts
WHERE name LIKE '%s'; #s 結尾

# IN 語句
SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name IN ('Walmart', 'Target', 'Nordstrom');

#AND 运算符用于 WHERE 语句中，用于一次考虑多个逻辑子句
SELECT *
FROM orders
WHERE standard_qty>1000 AND poster_qty=0 AND gloss_qty=0;

SELECT name
FROM accounts
WHERE name NOT LIKE 'C%' AND name LIKE '%s';

SELECT *
FROM web_events
WHERE channel IN ('organic','adwords') AND
occurred_at BETWEEN '2016-01-01' AND '2017-01-01'
ORDER BY occurred_at DESC;

#OR 語句
SELECT *
FROM orders
WHERE standard_qty=0 AND (gloss_qty>1000 OR poster_qty>1000);

SELECT *
FROM accounts
WHERE (name LIKE 'C%' OR name LIKE 'W%')
            AND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%')
            AND (primary_poc NOT LIKE '%eana%'));

#JOIN 語句
SELECT orders.standard_qty,orders.gloss_qty,orders.poster_qty,
       accounts.website,accounts.primary_poc
FROM orders
JOIN accounts
ON orders.account_id = accounts.id;
''''
主键 (PK)
主键是特定表格的唯一列。在我们的每个表格中是第一列，并且这些列都叫做 id，但是并非必须都要这样。
通常，在大多数数据库中，主键是表格的第一列。
外键 (FK)
外键是另一个表格中的主键。
#连接表格时，最好能为每个表格设置一个别名
FROM tablename AS t1
JOIN tablename2 AS t2

''''
SELECT accounts.name,accounts.primary_poc,web_events.occurred_at,web_events.channel
FROM accounts
JOIN web_events
ON accounts.id = web_events.account_id
WHERE name='Walmart';

SELECT r.name region,s.name rep,a.name account
FROM sales_reps s
JOIN accounts a
ON s.id = a.sales_rep_id
JOIN region r
ON r.id = s.region_id
ORDER BY a.name;

SELECT
r.name regionname,
a.name accname,
o.total_amt_usd/(o.total+ 0.01) unitprice
FROM accounts a
JOIN orders o
ON o.account_id = a.id
JOIN sales_reps s
ON s.id = a.sales_rep_id
JOIN region r
ON r.id = s.region_id;

#JOIN - 一种 INNER JOIN，仅获取在两个表格中都存在的数据。
#LEFT JOIN - 用于获取 FROM 中的表格中的所有行，即使它们不存在于 JOIN 语句中。
#RIGHT JOIN - 用于获取 JOIN 中的表格中的所有行，即使它们不存在于 FROM 语句中。


#聚合 COUNT
#NULL 与零不同，它们表示不存在数据的单元格
#在 WHERE 条件中表示 NULL 时，成 IS NULL 或 IS NOT NULL 不使用 =

SELECT COUNT(region.name)
FROM region;

# SUM
#只能针对数字列使用 SUM
#SUM 将忽略 NULL 值，其他聚合函数也是这样
#注意：聚合函数只聚合列的值
#如果对行进行计算，使用简单算术表达式

SELECT SUM(standard_qty)
FROM orders;

#MIN 返回最小的数字、最早的日期,按字母表排序的最之前的非数字值
#MAX 返回最大的数字、最近的日期,与“Z”最接近（按字母表顺序排列）的非数字值
#AVG 返回数据的平均值


#注意格式，簡潔易懂
SELECT *
FROM (SELECT DATE_TRUNC('day',occurred_at) AS day,
                channel, COUNT(*) as events
      FROM web_events
      GROUP BY 1,2
      ORDER BY 3 DESC) sub
GROUP BY channel
ORDER BY 2 DESC;

#LEFT 从起点（或左侧）开始，从特定列中的每行获取一定数量的字符
SELECT LEFT(UPPER(name), 1) AS first_letter, COUNT(*) num_companies
FROM accounts
GROUP BY 1
ORDER BY 2 DESC;

#RIGHT 从末尾（或右侧）开始，从特定列中的每行获取一定数量的字符
SELECT RIGHT(website, 3) AS domain, COUNT(*) num_companies
FROM accounts
GROUP BY 1
ORDER BY 2 DESC;

SELECT SUM(num) nums, SUM(letter) letters
FROM (SELECT name, CASE WHEN LEFT(UPPER(name), 1) IN ('0','1','2','3','4','5','6','7','8','9')
                       THEN 1 ELSE 0 END AS num,
         CASE WHEN LEFT(UPPER(name), 1) IN ('0','1','2','3','4','5','6','7','8','9')
                       THEN 0 ELSE 1 END AS letter
      FROM accounts) t1;

#LENGTH 提供了特定列每行的字符数

#POSITION 获取字符和列，并提供该字符在每行的索引。第一个位置的索引在 SQL 中是 1
#POSITION(',' IN city_state) 获取逗号的索引
#STRPOS和POSITION 提供的结果相同，但是语法不太一样，STRPOS(city_state, ‘,’)
#注意，POSITION 和 STRPOS 都区分大小写，因此查找 A 的位置与查找 a 的结果不同
#使用 LOWER 或 UPPER 让所有字符变成小写或大写

SELECT LEFT(primary_poc, STRPOS(primary_poc, ' ') -1 ) first_name,
RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name
FROM accounts;

#组合
#CONCAT(first_name, ' ', last_name)
#或者使用双竖线：first_name || ' ' || last_name

WITH t1 AS (
 SELECT LEFT(primary_poc,     STRPOS(primary_poc, ' ') -1 ) first_name,  RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name, name
 FROM accounts)
SELECT first_name, last_name, CONCAT(first_name, '.', last_name, '@', name, '.com')
FROM t1;

WITH t1 AS (
 SELECT LEFT(primary_poc,     STRPOS(primary_poc, ' ') -1 ) first_name,  RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name, name
 FROM accounts)
SELECT first_name, last_name, CONCAT(first_name, '.', last_name, '@', name, '.com'), LEFT(LOWER(first_name), 1) || RIGHT(LOWER(first_name), 1) || LEFT(LOWER(last_name), 1) || RIGHT(LOWER(last_name), 1) || LENGTH(first_name) || LENGTH(last_name) || REPLACE(UPPER(name), ' ', '')
FROM t1;

#更改类型
#TO_DATE
#CAST()
#::
DATE_PART('month', TO_DATE(month, 'month'))
CAST(date_column AS DATE)
date_column::DATE

SELECT date orig_date, (SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) || '-' || SUBSTR(date, 4, 2)) new_date
FROM sf_crime_data;

#COALESCE 返回的是每行的第一个非 NULL 值
SELECT COALESCE(a.id, a.id) filled_id, a.name, a.website, a.lat, a.long, a.primary_poc, a.sales_rep_id, o.*
FROM accounts a
LEFT JOIN orders o
ON a.id = o.account_id
WHERE o.total IS NULL;

#删除
TRIM 删掉字符串开头和末尾的字符

#更多语法见以下链接
https://www.postgresql.org/docs/8.1/static/functions-string.html
http://www.postgresqltutorial.com/postgresql-cast/
